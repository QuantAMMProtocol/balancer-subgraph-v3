// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AuthorizerChanged extends ethereum.Event {
  get params(): AuthorizerChanged__Params {
    return new AuthorizerChanged__Params(this);
  }
}

export class AuthorizerChanged__Params {
  _event: AuthorizerChanged;

  constructor(event: AuthorizerChanged) {
    this._event = event;
  }

  get newAuthorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolBalanceChanged extends ethereum.Event {
  get params(): PoolBalanceChanged__Params {
    return new PoolBalanceChanged__Params(this);
  }
}

export class PoolBalanceChanged__Params {
  _event: PoolBalanceChanged;

  constructor(event: PoolBalanceChanged) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get liquidityProvider(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get deltas(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class PoolInitialized extends ethereum.Event {
  get params(): PoolInitialized__Params {
    return new PoolInitialized__Params(this);
  }
}

export class PoolInitialized__Params {
  _event: PoolInitialized;

  constructor(event: PoolInitialized) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolPausedStateChanged extends ethereum.Event {
  get params(): PoolPausedStateChanged__Params {
    return new PoolPausedStateChanged__Params(this);
  }
}

export class PoolPausedStateChanged__Params {
  _event: PoolPausedStateChanged;

  constructor(event: PoolPausedStateChanged) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paused(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PoolRecoveryModeStateChanged extends ethereum.Event {
  get params(): PoolRecoveryModeStateChanged__Params {
    return new PoolRecoveryModeStateChanged__Params(this);
  }
}

export class PoolRecoveryModeStateChanged__Params {
  _event: PoolRecoveryModeStateChanged;

  constructor(event: PoolRecoveryModeStateChanged) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recoveryMode(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PoolRegistered extends ethereum.Event {
  get params(): PoolRegistered__Params {
    return new PoolRegistered__Params(this);
  }
}

export class PoolRegistered__Params {
  _event: PoolRegistered;

  constructor(event: PoolRegistered) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get factory(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get rateProviders(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }

  get pauseWindowEndTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get pauseManager(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get callbacks(): PoolRegisteredCallbacksStruct {
    return changetype<PoolRegisteredCallbacksStruct>(
      this._event.parameters[6].value.toTuple(),
    );
  }

  get liquidityManagement(): PoolRegisteredLiquidityManagementStruct {
    return changetype<PoolRegisteredLiquidityManagementStruct>(
      this._event.parameters[7].value.toTuple(),
    );
  }
}

export class PoolRegisteredCallbacksStruct extends ethereum.Tuple {
  get shouldCallBeforeInitialize(): boolean {
    return this[0].toBoolean();
  }

  get shouldCallAfterInitialize(): boolean {
    return this[1].toBoolean();
  }

  get shouldCallBeforeSwap(): boolean {
    return this[2].toBoolean();
  }

  get shouldCallAfterSwap(): boolean {
    return this[3].toBoolean();
  }

  get shouldCallBeforeAddLiquidity(): boolean {
    return this[4].toBoolean();
  }

  get shouldCallAfterAddLiquidity(): boolean {
    return this[5].toBoolean();
  }

  get shouldCallBeforeRemoveLiquidity(): boolean {
    return this[6].toBoolean();
  }

  get shouldCallAfterRemoveLiquidity(): boolean {
    return this[7].toBoolean();
  }
}

export class PoolRegisteredLiquidityManagementStruct extends ethereum.Tuple {
  get supportsAddLiquidityCustom(): boolean {
    return this[0].toBoolean();
  }

  get supportsRemoveLiquidityCustom(): boolean {
    return this[1].toBoolean();
  }
}

export class ProtocolFeeCollected extends ethereum.Event {
  get params(): ProtocolFeeCollected__Params {
    return new ProtocolFeeCollected__Params(this);
  }
}

export class ProtocolFeeCollected__Params {
  _event: ProtocolFeeCollected;

  constructor(event: ProtocolFeeCollected) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ProtocolSwapFeePercentageChanged extends ethereum.Event {
  get params(): ProtocolSwapFeePercentageChanged__Params {
    return new ProtocolSwapFeePercentageChanged__Params(this);
  }
}

export class ProtocolSwapFeePercentageChanged__Params {
  _event: ProtocolSwapFeePercentageChanged;

  constructor(event: ProtocolSwapFeePercentageChanged) {
    this._event = event;
  }

  get swapFeePercentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get swapFeeAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SwapFeePercentageChanged extends ethereum.Event {
  get params(): SwapFeePercentageChanged__Params {
    return new SwapFeePercentageChanged__Params(this);
  }
}

export class SwapFeePercentageChanged__Params {
  _event: SwapFeePercentageChanged;

  constructor(event: SwapFeePercentageChanged) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get swapFeePercentage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VaultPausedStateChanged extends ethereum.Event {
  get params(): VaultPausedStateChanged__Params {
    return new VaultPausedStateChanged__Params(this);
  }
}

export class VaultPausedStateChanged__Params {
  _event: VaultPausedStateChanged;

  constructor(event: VaultPausedStateChanged) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Vault__addLiquidityResult {
  value0: Array<BigInt>;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: Array<BigInt>, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getAmountsIn(): Array<BigInt> {
    return this.value0;
  }

  getBptAmountOut(): BigInt {
    return this.value1;
  }

  getReturnData(): Bytes {
    return this.value2;
  }
}

export class Vault__addLiquidityInputParamsStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get minBptAmountOut(): BigInt {
    return this[3].toBigInt();
  }

  get kind(): i32 {
    return this[4].toI32();
  }

  get userData(): Bytes {
    return this[5].toBytes();
  }
}

export class Vault__getPoolConfigResultValue0Struct extends ethereum.Tuple {
  get isPoolRegistered(): boolean {
    return this[0].toBoolean();
  }

  get isPoolInitialized(): boolean {
    return this[1].toBoolean();
  }

  get isPoolPaused(): boolean {
    return this[2].toBoolean();
  }

  get isPoolInRecoveryMode(): boolean {
    return this[3].toBoolean();
  }

  get hasDynamicSwapFee(): boolean {
    return this[4].toBoolean();
  }

  get staticSwapFeePercentage(): BigInt {
    return this[5].toBigInt();
  }

  get tokenDecimalDiffs(): i32 {
    return this[6].toI32();
  }

  get pauseWindowEndTime(): BigInt {
    return this[7].toBigInt();
  }

  get callbacks(): Vault__getPoolConfigResultValue0CallbacksStruct {
    return changetype<Vault__getPoolConfigResultValue0CallbacksStruct>(
      this[8].toTuple(),
    );
  }

  get liquidityManagement(): Vault__getPoolConfigResultValue0LiquidityManagementStruct {
    return changetype<Vault__getPoolConfigResultValue0LiquidityManagementStruct>(
      this[9].toTuple(),
    );
  }
}

export class Vault__getPoolConfigResultValue0CallbacksStruct extends ethereum.Tuple {
  get shouldCallBeforeInitialize(): boolean {
    return this[0].toBoolean();
  }

  get shouldCallAfterInitialize(): boolean {
    return this[1].toBoolean();
  }

  get shouldCallBeforeSwap(): boolean {
    return this[2].toBoolean();
  }

  get shouldCallAfterSwap(): boolean {
    return this[3].toBoolean();
  }

  get shouldCallBeforeAddLiquidity(): boolean {
    return this[4].toBoolean();
  }

  get shouldCallAfterAddLiquidity(): boolean {
    return this[5].toBoolean();
  }

  get shouldCallBeforeRemoveLiquidity(): boolean {
    return this[6].toBoolean();
  }

  get shouldCallAfterRemoveLiquidity(): boolean {
    return this[7].toBoolean();
  }
}

export class Vault__getPoolConfigResultValue0LiquidityManagementStruct extends ethereum.Tuple {
  get supportsAddLiquidityCustom(): boolean {
    return this[0].toBoolean();
  }

  get supportsRemoveLiquidityCustom(): boolean {
    return this[1].toBoolean();
  }
}

export class Vault__getPoolPausedStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): Address {
    return this.value3;
  }
}

export class Vault__getPoolTokenCountAndIndexOfTokenResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Vault__getPoolTokenInfoResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<Address>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<Address>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromAddressArray(this.value3));
    return map;
  }

  getTokens(): Array<Address> {
    return this.value0;
  }

  getBalancesRaw(): Array<BigInt> {
    return this.value1;
  }

  getDecimalScalingFactors(): Array<BigInt> {
    return this.value2;
  }

  getRateProviders(): Array<Address> {
    return this.value3;
  }
}

export class Vault__getVaultPausedStateResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class Vault__removeLiquidityResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Bytes;

  constructor(value0: BigInt, value1: Array<BigInt>, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getBptAmountIn(): BigInt {
    return this.value0;
  }

  getAmountsOut(): Array<BigInt> {
    return this.value1;
  }

  getReturnData(): Bytes {
    return this.value2;
  }
}

export class Vault__removeLiquidityInputParamsStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get from(): Address {
    return this[1].toAddress();
  }

  get maxBptAmountIn(): BigInt {
    return this[2].toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get kind(): i32 {
    return this[4].toI32();
  }

  get userData(): Bytes {
    return this[5].toBytes();
  }
}

export class Vault__swapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountCalculated(): BigInt {
    return this.value0;
  }

  getAmountIn(): BigInt {
    return this.value1;
  }

  getAmountOut(): BigInt {
    return this.value2;
  }
}

export class Vault__swapInputParamsStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get tokenIn(): Address {
    return this[2].toAddress();
  }

  get tokenOut(): Address {
    return this[3].toAddress();
  }

  get amountGivenRaw(): BigInt {
    return this[4].toBigInt();
  }

  get userData(): Bytes {
    return this[5].toBytes();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  MAX_BUFFER_PERIOD_DURATION(): BigInt {
    let result = super.call(
      "MAX_BUFFER_PERIOD_DURATION",
      "MAX_BUFFER_PERIOD_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_BUFFER_PERIOD_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BUFFER_PERIOD_DURATION",
      "MAX_BUFFER_PERIOD_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PAUSE_WINDOW_DURATION(): BigInt {
    let result = super.call(
      "MAX_PAUSE_WINDOW_DURATION",
      "MAX_PAUSE_WINDOW_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_PAUSE_WINDOW_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PAUSE_WINDOW_DURATION",
      "MAX_PAUSE_WINDOW_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addLiquidity(
    params: Vault__addLiquidityInputParamsStruct,
  ): Vault__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity((address,address,uint256[],uint256,uint8,bytes)):(uint256[],uint256,bytes)",
      [ethereum.Value.fromTuple(params)],
    );

    return new Vault__addLiquidityResult(
      result[0].toBigIntArray(),
      result[1].toBigInt(),
      result[2].toBytes(),
    );
  }

  try_addLiquidity(
    params: Vault__addLiquidityInputParamsStruct,
  ): ethereum.CallResult<Vault__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity((address,address,uint256[],uint256,uint8,bytes)):(uint256[],uint256,bytes)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__addLiquidityResult(
        value[0].toBigIntArray(),
        value[1].toBigInt(),
        value[2].toBytes(),
      ),
    );
  }

  allowance(token: Address, owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
      ],
    );

    return result[0].toBigInt();
  }

  try_allowance(
    token: Address,
    owner: Address,
    spender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(owner: Address, spender: Address, amount: BigInt): boolean {
    let result = super.call(
      "approve",
      "approve(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_approve(
    owner: Address,
    spender: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approve",
      "approve(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(token: Address, account: Address): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(token: Address, account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,address):(uint256)",
      [ethereum.Value.fromAddress(token), ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActionId(selector: Bytes): Bytes {
    let result = super.call("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector),
    ]);

    return result[0].toBytes();
  }

  try_getActionId(selector: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getActionId", "getActionId(bytes4):(bytes32)", [
      ethereum.Value.fromFixedBytes(selector),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAuthorizer(): Address {
    let result = super.call("getAuthorizer", "getAuthorizer():(address)", []);

    return result[0].toAddress();
  }

  try_getAuthorizer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAuthorizer",
      "getAuthorizer():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHandler(index: BigInt): Address {
    let result = super.call("getHandler", "getHandler(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toAddress();
  }

  try_getHandler(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getHandler", "getHandler(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHandlersCount(): BigInt {
    let result = super.call(
      "getHandlersCount",
      "getHandlersCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getHandlersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getHandlersCount",
      "getHandlersCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaximumPoolTokens(): BigInt {
    let result = super.call(
      "getMaximumPoolTokens",
      "getMaximumPoolTokens():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMaximumPoolTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaximumPoolTokens",
      "getMaximumPoolTokens():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinimumPoolTokens(): BigInt {
    let result = super.call(
      "getMinimumPoolTokens",
      "getMinimumPoolTokens():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMinimumPoolTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinimumPoolTokens",
      "getMinimumPoolTokens():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonzeroDeltaCount(): BigInt {
    let result = super.call(
      "getNonzeroDeltaCount",
      "getNonzeroDeltaCount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getNonzeroDeltaCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNonzeroDeltaCount",
      "getNonzeroDeltaCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolConfig(pool: Address): Vault__getPoolConfigResultValue0Struct {
    let result = super.call(
      "getPoolConfig",
      "getPoolConfig(address):((bool,bool,bool,bool,bool,uint64,uint24,uint32,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool)))",
      [ethereum.Value.fromAddress(pool)],
    );

    return changetype<Vault__getPoolConfigResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPoolConfig(
    pool: Address,
  ): ethereum.CallResult<Vault__getPoolConfigResultValue0Struct> {
    let result = super.tryCall(
      "getPoolConfig",
      "getPoolConfig(address):((bool,bool,bool,bool,bool,uint64,uint24,uint32,(bool,bool,bool,bool,bool,bool,bool,bool),(bool,bool)))",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__getPoolConfigResultValue0Struct>(value[0].toTuple()),
    );
  }

  getPoolPausedState(pool: Address): Vault__getPoolPausedStateResult {
    let result = super.call(
      "getPoolPausedState",
      "getPoolPausedState(address):(bool,uint256,uint256,address)",
      [ethereum.Value.fromAddress(pool)],
    );

    return new Vault__getPoolPausedStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
    );
  }

  try_getPoolPausedState(
    pool: Address,
  ): ethereum.CallResult<Vault__getPoolPausedStateResult> {
    let result = super.tryCall(
      "getPoolPausedState",
      "getPoolPausedState(address):(bool,uint256,uint256,address)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getPoolPausedStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
      ),
    );
  }

  getPoolTokenCountAndIndexOfToken(
    pool: Address,
    token: Address,
  ): Vault__getPoolTokenCountAndIndexOfTokenResult {
    let result = super.call(
      "getPoolTokenCountAndIndexOfToken",
      "getPoolTokenCountAndIndexOfToken(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(pool), ethereum.Value.fromAddress(token)],
    );

    return new Vault__getPoolTokenCountAndIndexOfTokenResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getPoolTokenCountAndIndexOfToken(
    pool: Address,
    token: Address,
  ): ethereum.CallResult<Vault__getPoolTokenCountAndIndexOfTokenResult> {
    let result = super.tryCall(
      "getPoolTokenCountAndIndexOfToken",
      "getPoolTokenCountAndIndexOfToken(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(pool), ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getPoolTokenCountAndIndexOfTokenResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getPoolTokenInfo(pool: Address): Vault__getPoolTokenInfoResult {
    let result = super.call(
      "getPoolTokenInfo",
      "getPoolTokenInfo(address):(address[],uint256[],uint256[],address[])",
      [ethereum.Value.fromAddress(pool)],
    );

    return new Vault__getPoolTokenInfoResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toAddressArray(),
    );
  }

  try_getPoolTokenInfo(
    pool: Address,
  ): ethereum.CallResult<Vault__getPoolTokenInfoResult> {
    let result = super.tryCall(
      "getPoolTokenInfo",
      "getPoolTokenInfo(address):(address[],uint256[],uint256[],address[])",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getPoolTokenInfoResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toAddressArray(),
      ),
    );
  }

  getPoolTokenRates(pool: Address): Array<BigInt> {
    let result = super.call(
      "getPoolTokenRates",
      "getPoolTokenRates(address):(uint256[])",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBigIntArray();
  }

  try_getPoolTokenRates(pool: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPoolTokenRates",
      "getPoolTokenRates(address):(uint256[])",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPoolTokens(pool: Address): Array<Address> {
    let result = super.call(
      "getPoolTokens",
      "getPoolTokens(address):(address[])",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toAddressArray();
  }

  try_getPoolTokens(pool: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPoolTokens",
      "getPoolTokens(address):(address[])",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getProtocolSwapFee(token: Address): BigInt {
    let result = super.call(
      "getProtocolSwapFee",
      "getProtocolSwapFee(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getProtocolSwapFee(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolSwapFee",
      "getProtocolSwapFee(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProtocolSwapFeePercentage(): BigInt {
    let result = super.call(
      "getProtocolSwapFeePercentage",
      "getProtocolSwapFeePercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getProtocolSwapFeePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProtocolSwapFeePercentage",
      "getProtocolSwapFeePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStaticSwapFeePercentage(pool: Address): BigInt {
    let result = super.call(
      "getStaticSwapFeePercentage",
      "getStaticSwapFeePercentage(address):(uint256)",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBigInt();
  }

  try_getStaticSwapFeePercentage(pool: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStaticSwapFeePercentage",
      "getStaticSwapFeePercentage(address):(uint256)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenDelta(user: Address, token: Address): BigInt {
    let result = super.call(
      "getTokenDelta",
      "getTokenDelta(address,address):(int256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getTokenDelta(
    user: Address,
    token: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenDelta",
      "getTokenDelta(address,address):(int256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenReserve(token: Address): BigInt {
    let result = super.call(
      "getTokenReserve",
      "getTokenReserve(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getTokenReserve(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenReserve",
      "getTokenReserve(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultPausedState(): Vault__getVaultPausedStateResult {
    let result = super.call(
      "getVaultPausedState",
      "getVaultPausedState():(bool,uint256,uint256)",
      [],
    );

    return new Vault__getVaultPausedStateResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_getVaultPausedState(): ethereum.CallResult<Vault__getVaultPausedStateResult> {
    let result = super.tryCall(
      "getVaultPausedState",
      "getVaultPausedState():(bool,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__getVaultPausedStateResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  initialize(
    pool: Address,
    to: Address,
    tokens: Array<Address>,
    exactAmountsIn: Array<BigInt>,
    minBptAmountOut: BigInt,
    userData: Bytes,
  ): BigInt {
    let result = super.call(
      "initialize",
      "initialize(address,address,address[],uint256[],uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(exactAmountsIn),
        ethereum.Value.fromUnsignedBigInt(minBptAmountOut),
        ethereum.Value.fromBytes(userData),
      ],
    );

    return result[0].toBigInt();
  }

  try_initialize(
    pool: Address,
    to: Address,
    tokens: Array<Address>,
    exactAmountsIn: Array<BigInt>,
    minBptAmountOut: BigInt,
    userData: Bytes,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "initialize",
      "initialize(address,address,address[],uint256[],uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(exactAmountsIn),
        ethereum.Value.fromUnsignedBigInt(minBptAmountOut),
        ethereum.Value.fromBytes(userData),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPoolInRecoveryMode(pool: Address): boolean {
    let result = super.call(
      "isPoolInRecoveryMode",
      "isPoolInRecoveryMode(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBoolean();
  }

  try_isPoolInRecoveryMode(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolInRecoveryMode",
      "isPoolInRecoveryMode(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPoolInitialized(pool: Address): boolean {
    let result = super.call(
      "isPoolInitialized",
      "isPoolInitialized(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBoolean();
  }

  try_isPoolInitialized(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolInitialized",
      "isPoolInitialized(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPoolPaused(pool: Address): boolean {
    let result = super.call("isPoolPaused", "isPoolPaused(address):(bool)", [
      ethereum.Value.fromAddress(pool),
    ]);

    return result[0].toBoolean();
  }

  try_isPoolPaused(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPoolPaused", "isPoolPaused(address):(bool)", [
      ethereum.Value.fromAddress(pool),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPoolRegistered(pool: Address): boolean {
    let result = super.call(
      "isPoolRegistered",
      "isPoolRegistered(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBoolean();
  }

  try_isPoolRegistered(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPoolRegistered",
      "isPoolRegistered(address):(bool)",
      [ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isQueryDisabled(): boolean {
    let result = super.call("isQueryDisabled", "isQueryDisabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_isQueryDisabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isQueryDisabled",
      "isQueryDisabled():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVaultPaused(): boolean {
    let result = super.call("isVaultPaused", "isVaultPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isVaultPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isVaultPaused", "isVaultPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeLiquidity(
    params: Vault__removeLiquidityInputParamsStruct,
  ): Vault__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity((address,address,uint256,uint256[],uint8,bytes)):(uint256,uint256[],bytes)",
      [ethereum.Value.fromTuple(params)],
    );

    return new Vault__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toBytes(),
    );
  }

  try_removeLiquidity(
    params: Vault__removeLiquidityInputParamsStruct,
  ): ethereum.CallResult<Vault__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity((address,address,uint256,uint256[],uint8,bytes)):(uint256,uint256[],bytes)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toBytes(),
      ),
    );
  }

  removeLiquidityRecovery(
    pool: Address,
    from: Address,
    exactBptAmountIn: BigInt,
  ): Array<BigInt> {
    let result = super.call(
      "removeLiquidityRecovery",
      "removeLiquidityRecovery(address,address,uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(exactBptAmountIn),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_removeLiquidityRecovery(
    pool: Address,
    from: Address,
    exactBptAmountIn: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "removeLiquidityRecovery",
      "removeLiquidityRecovery(address,address,uint256):(uint256[])",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(exactBptAmountIn),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  settle(token: Address): BigInt {
    let result = super.call("settle", "settle(address):(uint256)", [
      ethereum.Value.fromAddress(token),
    ]);

    return result[0].toBigInt();
  }

  try_settle(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("settle", "settle(address):(uint256)", [
      ethereum.Value.fromAddress(token),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swap(params: Vault__swapInputParamsStruct): Vault__swapResult {
    let result = super.call(
      "swap",
      "swap((uint8,address,address,address,uint256,bytes)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(params)],
    );

    return new Vault__swapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_swap(
    params: Vault__swapInputParamsStruct,
  ): ethereum.CallResult<Vault__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap((uint8,address,address,address,uint256,bytes)):(uint256,uint256,uint256)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__swapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  totalSupply(token: Address): BigInt {
    let result = super.call("totalSupply", "totalSupply(address):(uint256)", [
      ethereum.Value.fromAddress(token),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(owner: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transfer",
      "transfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transfer(
    owner: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    spender: Address,
    from: Address,
    to: Address,
    amount: BigInt,
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    spender: Address,
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get authorizer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pauseWindowDuration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bufferPeriodDuration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get params(): AddLiquidityCallParamsStruct {
    return changetype<AddLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amountsIn(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get bptAmountOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get returnData(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class AddLiquidityCallParamsStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get to(): Address {
    return this[1].toAddress();
  }

  get maxAmountsIn(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get minBptAmountOut(): BigInt {
    return this[3].toBigInt();
  }

  get kind(): i32 {
    return this[4].toI32();
  }

  get userData(): Bytes {
    return this[5].toBytes();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CollectProtocolFeesCall extends ethereum.Call {
  get inputs(): CollectProtocolFeesCall__Inputs {
    return new CollectProtocolFeesCall__Inputs(this);
  }

  get outputs(): CollectProtocolFeesCall__Outputs {
    return new CollectProtocolFeesCall__Outputs(this);
  }
}

export class CollectProtocolFeesCall__Inputs {
  _call: CollectProtocolFeesCall;

  constructor(call: CollectProtocolFeesCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class CollectProtocolFeesCall__Outputs {
  _call: CollectProtocolFeesCall;

  constructor(call: CollectProtocolFeesCall) {
    this._call = call;
  }
}

export class DisableQueryCall extends ethereum.Call {
  get inputs(): DisableQueryCall__Inputs {
    return new DisableQueryCall__Inputs(this);
  }

  get outputs(): DisableQueryCall__Outputs {
    return new DisableQueryCall__Outputs(this);
  }
}

export class DisableQueryCall__Inputs {
  _call: DisableQueryCall;

  constructor(call: DisableQueryCall) {
    this._call = call;
  }
}

export class DisableQueryCall__Outputs {
  _call: DisableQueryCall;

  constructor(call: DisableQueryCall) {
    this._call = call;
  }
}

export class DisableRecoveryModeCall extends ethereum.Call {
  get inputs(): DisableRecoveryModeCall__Inputs {
    return new DisableRecoveryModeCall__Inputs(this);
  }

  get outputs(): DisableRecoveryModeCall__Outputs {
    return new DisableRecoveryModeCall__Outputs(this);
  }
}

export class DisableRecoveryModeCall__Inputs {
  _call: DisableRecoveryModeCall;

  constructor(call: DisableRecoveryModeCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableRecoveryModeCall__Outputs {
  _call: DisableRecoveryModeCall;

  constructor(call: DisableRecoveryModeCall) {
    this._call = call;
  }
}

export class EnableRecoveryModeCall extends ethereum.Call {
  get inputs(): EnableRecoveryModeCall__Inputs {
    return new EnableRecoveryModeCall__Inputs(this);
  }

  get outputs(): EnableRecoveryModeCall__Outputs {
    return new EnableRecoveryModeCall__Outputs(this);
  }
}

export class EnableRecoveryModeCall__Inputs {
  _call: EnableRecoveryModeCall;

  constructor(call: EnableRecoveryModeCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableRecoveryModeCall__Outputs {
  _call: EnableRecoveryModeCall;

  constructor(call: EnableRecoveryModeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get exactAmountsIn(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get minBptAmountOut(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get bptAmountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InvokeCall extends ethereum.Call {
  get inputs(): InvokeCall__Inputs {
    return new InvokeCall__Inputs(this);
  }

  get outputs(): InvokeCall__Outputs {
    return new InvokeCall__Outputs(this);
  }
}

export class InvokeCall__Inputs {
  _call: InvokeCall;

  constructor(call: InvokeCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InvokeCall__Outputs {
  _call: InvokeCall;

  constructor(call: InvokeCall) {
    this._call = call;
  }

  get result(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PausePoolCall extends ethereum.Call {
  get inputs(): PausePoolCall__Inputs {
    return new PausePoolCall__Inputs(this);
  }

  get outputs(): PausePoolCall__Outputs {
    return new PausePoolCall__Outputs(this);
  }
}

export class PausePoolCall__Inputs {
  _call: PausePoolCall;

  constructor(call: PausePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PausePoolCall__Outputs {
  _call: PausePoolCall;

  constructor(call: PausePoolCall) {
    this._call = call;
  }
}

export class PauseVaultCall extends ethereum.Call {
  get inputs(): PauseVaultCall__Inputs {
    return new PauseVaultCall__Inputs(this);
  }

  get outputs(): PauseVaultCall__Outputs {
    return new PauseVaultCall__Outputs(this);
  }
}

export class PauseVaultCall__Inputs {
  _call: PauseVaultCall;

  constructor(call: PauseVaultCall) {
    this._call = call;
  }
}

export class PauseVaultCall__Outputs {
  _call: PauseVaultCall;

  constructor(call: PauseVaultCall) {
    this._call = call;
  }
}

export class QuoteCall extends ethereum.Call {
  get inputs(): QuoteCall__Inputs {
    return new QuoteCall__Inputs(this);
  }

  get outputs(): QuoteCall__Outputs {
    return new QuoteCall__Outputs(this);
  }
}

export class QuoteCall__Inputs {
  _call: QuoteCall;

  constructor(call: QuoteCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class QuoteCall__Outputs {
  _call: QuoteCall;

  constructor(call: QuoteCall) {
    this._call = call;
  }

  get result(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RegisterPoolCall extends ethereum.Call {
  get inputs(): RegisterPoolCall__Inputs {
    return new RegisterPoolCall__Inputs(this);
  }

  get outputs(): RegisterPoolCall__Outputs {
    return new RegisterPoolCall__Outputs(this);
  }
}

export class RegisterPoolCall__Inputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get rateProviders(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get pauseWindowEndTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get pauseManager(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get poolCallbacks(): RegisterPoolCallPoolCallbacksStruct {
    return changetype<RegisterPoolCallPoolCallbacksStruct>(
      this._call.inputValues[5].value.toTuple(),
    );
  }

  get liquidityManagement(): RegisterPoolCallLiquidityManagementStruct {
    return changetype<RegisterPoolCallLiquidityManagementStruct>(
      this._call.inputValues[6].value.toTuple(),
    );
  }
}

export class RegisterPoolCall__Outputs {
  _call: RegisterPoolCall;

  constructor(call: RegisterPoolCall) {
    this._call = call;
  }
}

export class RegisterPoolCallPoolCallbacksStruct extends ethereum.Tuple {
  get shouldCallBeforeInitialize(): boolean {
    return this[0].toBoolean();
  }

  get shouldCallAfterInitialize(): boolean {
    return this[1].toBoolean();
  }

  get shouldCallBeforeSwap(): boolean {
    return this[2].toBoolean();
  }

  get shouldCallAfterSwap(): boolean {
    return this[3].toBoolean();
  }

  get shouldCallBeforeAddLiquidity(): boolean {
    return this[4].toBoolean();
  }

  get shouldCallAfterAddLiquidity(): boolean {
    return this[5].toBoolean();
  }

  get shouldCallBeforeRemoveLiquidity(): boolean {
    return this[6].toBoolean();
  }

  get shouldCallAfterRemoveLiquidity(): boolean {
    return this[7].toBoolean();
  }
}

export class RegisterPoolCallLiquidityManagementStruct extends ethereum.Tuple {
  get supportsAddLiquidityCustom(): boolean {
    return this[0].toBoolean();
  }

  get supportsRemoveLiquidityCustom(): boolean {
    return this[1].toBoolean();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get params(): RemoveLiquidityCallParamsStruct {
    return changetype<RemoveLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get bptAmountIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountsOut(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }

  get returnData(): Bytes {
    return this._call.outputValues[2].value.toBytes();
  }
}

export class RemoveLiquidityCallParamsStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get from(): Address {
    return this[1].toAddress();
  }

  get maxBptAmountIn(): BigInt {
    return this[2].toBigInt();
  }

  get minAmountsOut(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get kind(): i32 {
    return this[4].toI32();
  }

  get userData(): Bytes {
    return this[5].toBytes();
  }
}

export class RemoveLiquidityRecoveryCall extends ethereum.Call {
  get inputs(): RemoveLiquidityRecoveryCall__Inputs {
    return new RemoveLiquidityRecoveryCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityRecoveryCall__Outputs {
    return new RemoveLiquidityRecoveryCall__Outputs(this);
  }
}

export class RemoveLiquidityRecoveryCall__Inputs {
  _call: RemoveLiquidityRecoveryCall;

  constructor(call: RemoveLiquidityRecoveryCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get exactBptAmountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RemoveLiquidityRecoveryCall__Outputs {
  _call: RemoveLiquidityRecoveryCall;

  constructor(call: RemoveLiquidityRecoveryCall) {
    this._call = call;
  }

  get amountsOutRaw(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class RetrieveCall extends ethereum.Call {
  get inputs(): RetrieveCall__Inputs {
    return new RetrieveCall__Inputs(this);
  }

  get outputs(): RetrieveCall__Outputs {
    return new RetrieveCall__Outputs(this);
  }
}

export class RetrieveCall__Inputs {
  _call: RetrieveCall;

  constructor(call: RetrieveCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RetrieveCall__Outputs {
  _call: RetrieveCall;

  constructor(call: RetrieveCall) {
    this._call = call;
  }
}

export class SetAuthorizerCall extends ethereum.Call {
  get inputs(): SetAuthorizerCall__Inputs {
    return new SetAuthorizerCall__Inputs(this);
  }

  get outputs(): SetAuthorizerCall__Outputs {
    return new SetAuthorizerCall__Outputs(this);
  }
}

export class SetAuthorizerCall__Inputs {
  _call: SetAuthorizerCall;

  constructor(call: SetAuthorizerCall) {
    this._call = call;
  }

  get newAuthorizer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorizerCall__Outputs {
  _call: SetAuthorizerCall;

  constructor(call: SetAuthorizerCall) {
    this._call = call;
  }
}

export class SetProtocolSwapFeePercentageCall extends ethereum.Call {
  get inputs(): SetProtocolSwapFeePercentageCall__Inputs {
    return new SetProtocolSwapFeePercentageCall__Inputs(this);
  }

  get outputs(): SetProtocolSwapFeePercentageCall__Outputs {
    return new SetProtocolSwapFeePercentageCall__Outputs(this);
  }
}

export class SetProtocolSwapFeePercentageCall__Inputs {
  _call: SetProtocolSwapFeePercentageCall;

  constructor(call: SetProtocolSwapFeePercentageCall) {
    this._call = call;
  }

  get newProtocolSwapFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolSwapFeePercentageCall__Outputs {
  _call: SetProtocolSwapFeePercentageCall;

  constructor(call: SetProtocolSwapFeePercentageCall) {
    this._call = call;
  }
}

export class SetStaticSwapFeePercentageCall extends ethereum.Call {
  get inputs(): SetStaticSwapFeePercentageCall__Inputs {
    return new SetStaticSwapFeePercentageCall__Inputs(this);
  }

  get outputs(): SetStaticSwapFeePercentageCall__Outputs {
    return new SetStaticSwapFeePercentageCall__Outputs(this);
  }
}

export class SetStaticSwapFeePercentageCall__Inputs {
  _call: SetStaticSwapFeePercentageCall;

  constructor(call: SetStaticSwapFeePercentageCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get swapFeePercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStaticSwapFeePercentageCall__Outputs {
  _call: SetStaticSwapFeePercentageCall;

  constructor(call: SetStaticSwapFeePercentageCall) {
    this._call = call;
  }
}

export class SettleCall extends ethereum.Call {
  get inputs(): SettleCall__Inputs {
    return new SettleCall__Inputs(this);
  }

  get outputs(): SettleCall__Outputs {
    return new SettleCall__Outputs(this);
  }
}

export class SettleCall__Inputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SettleCall__Outputs {
  _call: SettleCall;

  constructor(call: SettleCall) {
    this._call = call;
  }

  get paid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get params(): SwapCallParamsStruct {
    return changetype<SwapCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amountCalculated(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class SwapCallParamsStruct extends ethereum.Tuple {
  get kind(): i32 {
    return this[0].toI32();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get tokenIn(): Address {
    return this[2].toAddress();
  }

  get tokenOut(): Address {
    return this[3].toAddress();
  }

  get amountGivenRaw(): BigInt {
    return this[4].toBigInt();
  }

  get userData(): Bytes {
    return this[5].toBytes();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpausePoolCall extends ethereum.Call {
  get inputs(): UnpausePoolCall__Inputs {
    return new UnpausePoolCall__Inputs(this);
  }

  get outputs(): UnpausePoolCall__Outputs {
    return new UnpausePoolCall__Outputs(this);
  }
}

export class UnpausePoolCall__Inputs {
  _call: UnpausePoolCall;

  constructor(call: UnpausePoolCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnpausePoolCall__Outputs {
  _call: UnpausePoolCall;

  constructor(call: UnpausePoolCall) {
    this._call = call;
  }
}

export class UnpauseVaultCall extends ethereum.Call {
  get inputs(): UnpauseVaultCall__Inputs {
    return new UnpauseVaultCall__Inputs(this);
  }

  get outputs(): UnpauseVaultCall__Outputs {
    return new UnpauseVaultCall__Outputs(this);
  }
}

export class UnpauseVaultCall__Inputs {
  _call: UnpauseVaultCall;

  constructor(call: UnpauseVaultCall) {
    this._call = call;
  }
}

export class UnpauseVaultCall__Outputs {
  _call: UnpauseVaultCall;

  constructor(call: UnpauseVaultCall) {
    this._call = call;
  }
}

export class WireCall extends ethereum.Call {
  get inputs(): WireCall__Inputs {
    return new WireCall__Inputs(this);
  }

  get outputs(): WireCall__Outputs {
    return new WireCall__Outputs(this);
  }
}

export class WireCall__Inputs {
  _call: WireCall;

  constructor(call: WireCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WireCall__Outputs {
  _call: WireCall;

  constructor(call: WireCall) {
    this._call = call;
  }
}
